div(id="customasin",class="",style="display:none")
    div(class="mb-3 row")
        label(for="sourceData[customasin][data]",class="col-sm-4 col-form-label") List of ASINs
            ul.form-text
                li One Per Line
                li ASINs are Case Sensitive
                li Example - Amazon:
                    pre.
                        B07H9Y6YHX
                        B01ND1R7Y0
                li Example - Shopee:
                    pre.
                        -i.75564088.4943363629
                        -i.85340527.2171174514
                li Example - Flipkart:
                    pre.
                        ItemID:ProductID
                        itm07bd49805407d:COMFRH6ZTRTQETDV
        .col-sm-5
            textarea(name="sourceData[customasin][data]",id="sourceData[customasin][data]",class="form-control",rows="10",onchange="countLines(this.id,'asinLines')",onkeyup="countLines(this.id,'asinLines')")= job.source.modifiedData
            div.mt-2
                input(type="button",value="Clean Up (Sort and Unique)",class="btn btn-sm btn-warning",onclick="cleanText('sourceData[customasin][data]')") 
                span.mt-2
                    strong
                        span  ASINs Found: 
                        span#asinLines 
                script.
                    countLines('sourceData[customasin][data]','asinLines')

    div(class="mb-3 row")
        label(for="sourceData[customasin][domain]",class="col-sm-4 col-form-label") Search Domain

        
        .col-sm-5
            - let domain_customasin = job.source.domain
            select(name="sourceData[customasin][domain]",id="sourceData[customasin][domain]",class="form-select",autocomplete="off",onchange=`showCurrentDomain(this.value,${editing})`,onclick=`showDomainCustomAsin(this.value,${editing}),currentBrowserCustomAsin("${domain}","${browser}",${editing})`)
                - let all_customasin = []
                each domain in domain_info
                    if domain.crawlerType == "customasin"
                        - all_customasin.push(domain.domainNickName)
                - all_customasin.sort()
                each domain_nick_name in all_customasin
                    each mydomain in domain_info 
                        if mydomain.crawlerType == "customasin" && mydomain.domainNickName === domain_nick_name
                            option(value = `${mydomain.domainName}`,selected = domain_customasin == `${mydomain.domainName}`) #{mydomain.domainNickName}
                //- each domain in domain_info
                //-     if domain.crawlerType == "customasin"
                //-         option(value = `${domain.domainName}`,selected=domain_customasin == `${domain.domainName}`) #{domain.domainNickName}
                //- option(value="WWW.AMAZON.AE",selected = domainName == "WWW.AMAZON.AE") Amazon.ae (UAE)
                //- option(value="WWW.AMAZON.IN",selected = domainName == "WWW.AMAZON.IN") Amazon.in (India)
                //- option(value="WWW.AMAZON.SA",selected = domainName == "WWW.AMAZON.SA") Amazon.sa (Saudi Arabia)
                //- option(disabled,value="WWW.AMAZON.COM") Amazon.com (USA)
                //- option(value="WWW.AMAZON.FR",selected = domainName == "WWW.AMAZON.FR") Amazon.fr (France)
                //- option(value="WWW.AMAZON.CO.JP",selected = domainName == "WWW.AMAZON.CO.JP") Amazon.co.jp (Japan)
                //- option(disabled,value="WWW.AMAZON.COM") Amazon.com (USA)
                //- option(value="BLIBLI.COM",selected=domainName == "BLIBLI.COM") Blibli.com (Indonesia)
                //- option(value="FLIPKART.COM",selected = domainName == "FLIPKART.COM") Flipkart.com (India)
                //- option(value="WWW.LAZADA.CO.ID",selected = domainName == "WWW.LAZADA.CO.ID") Lazada.co.id (Indonesia)
                //- option(value="WWW.LAZADA.COM.MY",selected = domainName == "WWW.LAZADA.COM.MY") Lazada.com.my (Malaysia)
                //- option(value="WWW.LAZADA.COM.PH",selected=domainName == "WWW.LAZADA.COM.PH") Lazada.com.ph (Philippines)
                //- option(value="WWW.LAZADA.SG",selected=domainName == "WWW.LAZADA.SG") Lazada.sg (Singapore)
                //- option(value="WWW.LAZADA.CO.TH",selected=domainName == "WWW.LAZADA.CO.TH") Lazada.co.th (Thailand)
                //- option(value="WWW.LAZADA.VN",selected=domainName == "WWW.LAZADA.VN") Lazada.vn (Vietnam)
                //- option(value="WWW.MYNTRA.COM",selected = domainName == "WWW.MYNTRA.COM") Myntra.com (India)
                //- option(value="WWW.NYKAA.COM",selected = domainName == "WWW.NYKAA.COM") Nykaa.com (India)
                //- option(value="SHOPEE.CO.ID",selected = domainName == "SHOPEE.CO.ID") Shopee.co.id (Indonesia)
                //- option(value="SHOPEE.COM.MY",selected = domainName == "SHOPEE.COM.MY") Shopee.com.my (Malaysia)
                //- option(value="SHOPEE.PH",selected = domainName == "SHOPEE.PH" ) Shopee.ph (Philippines)
                //- option(value="SHOPEE.SG",selected = domainName == "SHOPEE.SG") Shopee.sg (Singapore)
                //- option(value="SHOPEE.CO.TH",selected = domainName == "SHOPEE.CO.TH") Shopee.co.th (Thailand)
                //- option(value="SHOPEE.VN",selected = domainName == "SHOPEE.VN" ) Shopee.vn (Vietnam)
                //- option(value="TOKOPEDIA.COM",selected = domainName == "TOKOPEDIA.COM") Tokopedia.com (Indonesia)

    div(class="mb-3 row")
        label(for="sourceData[customasin][crawlinglanguage]",class="col-sm-4 col-form-label") Default Crawling Language
        .col-sm-5
            - let crawler_language_customasin = job.source.crawlinglanguage
            select(name="sourceData[customasin][crawlinglanguage]",id="sourceData[customasin][crawlinglanguage]",class="form-select",autocomplete="off")
                option(value="en_US",selected = crawler_language_customasin == "en_US") English US (Amazon)
                option(value="en_GB",selected = crawler_language_customasin == "en_GB") English GB (Amazon)
                option(value="ar_AE",selected = crawler_language_customasin == "ar_AE") Arabic (Amazon Saudi Arabia and UAE)
                option(value="fr_FR",selected = crawler_language_customasin == "fr_FR") French (Amazon France)
                option(value="de_DE",selected = crawler_language_customasin == "de_DE") German (Amazon Germany)
                option(value="it_IT",selected = crawler_language_customasin == "it_IT") Italian (Amazon Italy)
                option(value="ja_JP",selected = crawler_language_customasin == "ja_JP") Japanese (Amazon Japan)
                option(value="es_ES",selected = crawler_language_customasin == "es_ES") Spanish (Amazon Spain)
    div(class="mb-3 row")
        label(for="jobType",class="col-sm-4 col-form-label") Select Job Type
        .col-sm-5
            - let job_type = job.jobType
            select(name="jobType",id="jobType",class="form-select",autocomplete="off")
                option(value="Regular",selected = job_type == "Regular") Regular Job
                option(value="ContentScore",selected = job_type == "ContentScore") Content Scoring Job
    div(class="mb-3 row")
            label(for="sourceData[customasin][batchsize]",class="col-sm-4 col-form-label") Batch Size
                .form-text
                    ul
                        li Ideally Batch Size for Custom ASINs/Product Job is 1
                        li Only Positive Number can be provided as input
            .col-sm-5
                input(type = "number", min = "1", list="sourceData[customasin][batchsize]", name="sourceData[customasin][batchsize]", class = "form-control" ,value = `${batchsize}`,autocomplete = "off", placeholder = "Input Custom Batch Size or Select from the List")
                datalist(name="sourceData[customasin][batchsize]",id="sourceData[customasin][batchsize]")
                    option(value = 1) For Custom ASINs/Product Type Job
    div(class="mb-3 row",id="FLIPKART-COM-SELENIUM",style="display:none")
        label(for="customasin_cityselectflipselenium",class="col-sm-4 col-form-label") Provide City Information
            ul.form-text
                li Only Applicable for Flipkart Selenium - (Grocery)

        .col-sm-5
            - let flipkartpgType = job.source.page_type
            select(name="sourceData[customasin][page_type][flipkart]",id="sourceData[customasin][page_type][flipkart]",class="form-select",autocomplete="off",onchange="showFlipkartCustomAsin(this.value)")
                option(value="marketplace",selected=flipkartpgType == "marketplace") Default Search
                option(value="grocery",selected=flipkartpgType == "grocery") Grocery   

            div(class="",id="FLIPKART-COM-GROCERY",style="display:none")    
                .form-text.alert.alert-info
                    div(class="p-1 mb-1 small fw-bold") Provide City Information:
                        span.fw-normal Separate the pincodes by comma. Ensure that each pin code is 6 digits.
                    - var customasinCitiesFLIPSelenium = ['CityPincode']
                        for currentCity in customasinCitiesFLIPSelenium
                            button(type="button", id="customasin_cityselectflipselenium",class="btn btn-sm btn-primary mb-1", onclick=`addPincodeCustomAsin('${currentCity}','customasinpincodesflipselenium','')`) #{currentCity}
                    div(id="customasinpincodesflipselenium",class="mt-2 form-group row")    


    div(class="mb-3 row",id="AMAZON-IN-SELENIUM",style="display:none")
        label(for="customasin_cityselectamzselenium",class="col-sm-4 col-form-label") Provide City Information
            ul.form-text
                li Only Applicable for Amazon Selenium - (Pantry, Fresh)

        .col-sm-5
            - let customasinpgType = job.source.page_type
            select(name="sourceData[customasin][page_type][amazon]",id="sourceData[customasin][page_type][amazon]",class="form-select",autocomplete="off",onchange="showAmazonCustomAsin(this.value)")
                option(value="marketplace",selected=customasinpgType == "marketplace") Default Search
                option(value="pantry",selected=customasinpgType == "pantry") Amazon Pantry
                option(value="fresh",selected=customasinpgType == "fresh") Amazon Fresh

            div(class="",id="AMAZON-IN-PANTRY-FRESH",style="display:none")
                .form-text.alert.alert-info
                    div(class="p-1 mb-1 small fw-bold") Provide City Information:
                        span.fw-normal Separate the pincodes by comma. Ensure that each pin code is 6 digits.
                    - var customasinCitiesAMZSelenium = ['CityPincode']
                        for currentCity in customasinCitiesAMZSelenium
                            button(type="button", id="customasin_cityselectamzselenium",class="btn btn-sm btn-primary mb-1", onclick=`addPincodeCustomAsin('${currentCity}','customasinpincodesamzselenium','')`) #{currentCity}
                    div(id="customasinpincodesamzselenium",class="mt-2 form-group row")

    div(class="mb-3 row",id="NYKAA-COM-SELENIUM",style="display:none")
        label(for="customasin_cityselectnykaa",class="col-sm-4 col-form-label") Provide City Information
            ul.form-text
                li Only Applicable for Nykaa

        .col-sm-5
            .form-text.alert.alert-info
                div(class="p-1 mb-1 small fw-bold") Provide City Information:
                    span.fw-normal Separate the pincodes by comma. Ensure that each pin code is 6 digits.
                - var customasinCitiesNK = ['CityPincode']
                    for currentCity in customasinCitiesNK
                        button(type="button", id="customasin_cityselectnykaa",class="btn btn-sm btn-primary mb-1", onclick=`addPincodeCustomAsin('${currentCity}','customasinpincodesnykaa','')`) #{currentCity}
                div(id="customasinpincodesnykaa",class="mt-2 form-group row")



    div(class="mb-3 row",id="WWW-BIGBASKET-COM",style="display:none")
        label(for="customasin_cityselectbb",class="col-sm-4 col-form-label") Provide City Information
            ul.form-text
                li Only Applicable for BigBasket

        .col-sm-5
            .form-text.alert.alert-info
                div(class="p-1 mb-1 small fw-bold") Provide City Information:
                    span.fw-normal Separate the pincodes by comma. Ensure that each pin code is 6 digits.
                - var customasinCitiesBB = ['Ahemdabad-Gandhinagar','Bangalore','Chennai','Delhi','Gurgaon','Hyderabad','Jaipur','Kanchipuram','Kanpur','Kolkata','Lucknow','Mumbai','Noida-Ghaziabad','Pune']
                    for currentCity in customasinCitiesBB
                        button(type="button", id="customasin_cityselectbb",class="btn btn-sm btn-primary mb-1", onclick=`addPincodeCustomAsin('${currentCity}','customasinpincodesbb','')`) #{currentCity}
                div(id="customasinpincodesbb",class="mt-2 form-group row")

    div(class="mb-3 row",id="BLINKIT-COM",style="display:none")
        label(for="customasin_cityselectbk",class="col-sm-4 col-form-label") Provide City Information
            ul.form-text
                li Only Applicable for Blinkit

        .col-sm-5
            .form-text.alert.alert-info
                div(class="p-1 mb-1 small fw-bold") Provide City Information:
                    span.fw-normal Separate the pincodes by comma. Ensure that each pin code is 6 digits.
                - var customasinCitiesBK = ['CityPincode']
                    for currentCity in customasinCitiesBK
                        button(type="button", id="customasin_cityselectbk",class="btn btn-sm btn-primary mb-1", onclick=`addPincodeCustomAsin('${currentCity}','customasinpincodesbk','')`) #{currentCity}
                div(id="customasinpincodesbk",class="mt-2 form-group row")



    div(class="mb-3 row",id="FLIPKART-COM",style="display:none")
        label(for="customasin_cityselectfkregular",class="col-sm-4 col-form-label") Provide City Information
            ul.form-text
                li Only Applicable for Flipkart.com (Regular/Non-Selenium)

        .col-sm-5
            .form-text.alert.alert-info
                div(class="p-1 mb-1 small fw-bold") Provide City Information:
                    span.fw-normal   Separate the pincodes by comma. Ensure that each pin code is 6 digits.
                - var customasinCitiesFKRegular = ['CityPincode']
                    for currentCity in customasinCitiesFKRegular
                        button(type="button", id="customasin_cityselectfkregular",class="btn btn-sm btn-primary mb-1", onclick=`addPincodeCustomAsin('${currentCity}','customasinpincodesflipregular','')`) #{currentCity}
                div(id="customasinpincodesflipregular",class="mt-2 form-group row")




    div(class="mb-3 row",id="WWW-SWIGGY-COM",style="display:none")
        label(for="customasin_cityselectSG",class="col-sm-4 col-form-label") Provide City Information
            ul.form-text
                li Only Applicable for Swiggy

        .col-sm-5
            .form-text.alert.alert-info
                div(class="p-1 mb-1 small fw-bold") Provide City Information:
                    span.fw-normal Separate the pincodes by comma. Ensure that each pin code is 6 digits.
                - var customasinCitiesSG = ['CityPincode']
                    for currentCity in customasinCitiesSG
                        button(type="button", id="customasin_cityselectsg",class="btn btn-sm btn-primary mb-1", onclick=`addPincodeCustomAsin('${currentCity}','customasinpincodessg','')`) #{currentCity}
                div(id="customasinpincodessg",class="mt-2 form-group row")

    

    div(class="mb-3 row")
        label(for="sourceData[customasin][browser]",class="col-sm-4 col-form-label") Browser Interface
        .col-sm-5
            - let selected_browser = job.source.browser
            select(name="sourceData[customasin][browser]",id="sourceData[customasin][browser]",class="form-select",autocomplete="off")
                //- option(value="desktop",selected=selected_browser == "desktop") Desktop
                //- option(value="mobile",selected=selected_browser == "mobile") Mobile

            p.form-text 
                |If using Flipkart, Select 
                strong Mobile 
                |for 
                strong Sales Data
            
    div(class="mb-3 row")

        label(for="sourceData[customasin][screenshot]",class="col-sm-4 col-form-label") Save a Screenshot
            ul.form-text
                li Please keep in mind that each screenshot will take up additional disk space apart from the product page
        .col-sm-5
            select(name="sourceData[customasin][screenshot]",id="sourceData[customasin][screeshot]",class="form-select",autocomplete="off")
                option(value="false") No. Screenshot not required.
                option(disabled,value="true") Yes. Screenshot is required.

    div(class="mb-3 row")
        label(for="sourceData[customasin][proxytype]",class="col-sm-4 col-form-label") Proxy Type
        .col-sm-5
            - let proxy = job.source.proxytype
            select(name="sourceData[customasin][proxytype]",id="sourceData[customasin][proxytype]",class="form-select",autocomplete="off")
                option(value="datacenter",selected = proxy == "datacenter") Data Center
                option(value="hybrid",selected = proxy == "hybrid") Data Center, Failover Residential
                option(value="residential",selected = proxy == "residential") Residential (Higher Costing)
    
    div(class="mb-3 row")
        label(for="sourceData[customasin][sellerinfo]",class="col-sm-4 col-form-label") Get Seller Information
            ul.form-text
                li Generally for Seller Information, the Residential IPs will be  used
        .col-sm-5
            - let mysellerinfo = job.source.sellerinfo
            select(name="sourceData[customasin][sellerinfo]",id="sourceData[customasin][sellerinfo]",class="form-select",autocomplete="off")
                option(value="false",selected = mysellerinfo == false) No, Seller Information is not required
                option(value="true",selected = mysellerinfo == true) Yes, get Seller Information
    script.
         let selectedDomainCustomasin
        //- Search in Domain dropdown
        $(document).ready(function()  
        {
            $('#sourceData\\[customasin\\]\\[domain\\]').select2({width:'100%'});
            $('#sourceData\\[customasin\\]\\[domain\\]').one('select2:open', function(e) {
                $('input.select2-search__field').prop('placeholder', 'Search Domain Here');
            });
        });
        //- ! Below Comments are must read before any editing performed and in understanding the Code!
        //- ! Making "selectedDomainCustomasin" a global variable to access it in the below functions.
        function showDomainCustomAsin(currentDomain,isEditing){
            //-!  The value of selectedDomainCustomasin is declared as global variable and is used in the below currentBrowserCustomAsin function.Because not able to retrive the current value from same function(currentBrowserCustomAsin()).
            selectedDomainCustomasin = currentDomain
        } 
            //- ! The 'domain' argument in the below function is used to populate the domain while clicking on edit button which outputs to prefilled Job form.
        function currentBrowserCustomAsin(domain,browser,editing){
                //-? Only domain passed in the above function is current value while browser and editing is fetched from the backend db collection where job is saved.
                //- * Storing all the domain information below after stringifying in variable allDomainInformation.
                let allDomainInformation = !{JSON.stringify(domain_info)}
                if(editing == false) {
                    //- * Emptying the browsers value on changing the domain which triggers the function again. Without
                    //- * emptying the browser interface getting stacked.
                    $('#sourceData\\[customasin\\]\\[browser\\]').html("")
                    //- * Currently selected domain is consoled below.Selected means selected from dropdown.
                    console.log("Current domain selected for crawler type Customasin is",selectedDomainCustomasin)
                    for(let row of allDomainInformation){
                        //- ? While adding the job after selecting the domain populating the browserInterface.
                        if (row.crawlerType=="customasin" && row.domainName==selectedDomainCustomasin)
                        {
                            if(row.browserInterface[0] == "desktop"){
                                document.getElementById("sourceData[customasin][browser]").append(new Option("Desktop","desktop"));
                            }
                            if(row.browserInterface[0] == "mobile"){
                                document.getElementById("sourceData[customasin][browser]").append(new Option("Mobile","mobile"));
                            }   
                            if(row.browserInterface[1] == "mobile"){
                                document.getElementById("sourceData[customasin][browser]").append(new Option("Mobile","mobile"));
                            }
                            if(row.browserInterface[1] == "desktop"){
                                document.getElementById("sourceData[customasin][browser]").append(new Option("Desktop","desktop"));
                            }
                        }
                    }
                }
                else if(editing == true){
                    console.log("Current selected domain for crawler Type Customasin is",domain,"and saved browser before editing is",browser,"with editing status",editing)
                    //- * Emptying the browsers value on change which triggers the function again. Without
                    //- * emptying the browser interface get stacked.
                    $('#sourceData\\[customasin\\]\\[browser\\]').html("")
                    for(let row of allDomainInformation){
                        if ((row.crawlerType=="customasin" && row.domainName==selectedDomainCustomasin)){  
                            let browsers = row.browserInterface
                            //- Below console gives the value of browsers for the given domain in an array when selected during updating the edit job form. 
                            console.log("Browser Interface available for selected domain of customasin crawler type are "+ browsers)
                            if(browsers.length == 1){
                                let current_browser = browsers[0]
                                if (current_browser == "desktop")
                                    { 
                                        document.getElementById("sourceData[customasin][browser]").append(new Option("Desktop","desktop"));
                                    }
                                if (current_browser == "mobile")
                                    {
                                        document.getElementById("sourceData[customasin][browser]").append(new Option("Mobile","mobile"));   
                                    }
                            }
                            else if(browsers.length == 2){
                                //-    ?  If browser contains 2 interfaces (mobile and desktop) then populating browser Interface is slightly diffrent.
                                //-     ? The below code handles the situations if while adding the browser Interface on Keystone under New Crawler section whether the sequence is <desktop mobile> or <mobile desktop>.
                                let current_browser1
                                let current_browser2
                                if(browsers[0] == "mobile" && browsers[1] == "desktop"){
                                    current_browser1 = "mobile"
                                    current_browser2 = "desktop"
                                }
                                else if(browsers[0] == "desktop" && browsers[1] == "mobile"){
                                    current_browser1 = "desktop"
                                    current_browser2 = "mobile"
                                }
                                //- ? Always ensuring the value of given domain from frontend is equal to "mobile" and "desktop" only with ANY SEQUENCE.
                                if (domain == selectedDomainCustomasin && browser ==  "desktop" && current_browser2=="mobile" && current_browser1 == "desktop"){
                                        document.getElementById("sourceData[customasin][browser]").append(new Option("Desktop","desktop",null,true));
                                        document.getElementById("sourceData[customasin][browser]").append(new Option("Mobile","mobile"));
                                }
                                else if (domain == selectedDomainCustomasin &&   browser ==  "desktop" && current_browser2=="desktop" && current_browser1 == "mobile"){
                                        document.getElementById("sourceData[customasin][browser]").append(new Option("Desktop","desktop",null,true));
                                        document.getElementById("sourceData[customasin][browser]").append(new Option("Mobile","mobile"));
                                }
                                else if (domain == selectedDomainCustomasin && browser == "mobile" && current_browser2 == "desktop" && current_browser1 == "mobile"){
                                        document.getElementById("sourceData[customasin][browser]").append(new Option("Mobile","mobile",null,true));
                                        document.getElementById("sourceData[customasin][browser]").append(new Option("Desktop","desktop"));
                                }
                                else if (domain == selectedDomainCustomasin && browser == "mobile" && current_browser2 == "mobile" &&  current_browser1 == "desktop"){
                                        document.getElementById("sourceData[customasin][browser]").append(new Option("Mobile","mobile",null,true));
                                        document.getElementById("sourceData[customasin][browser]").append(new Option("Desktop","desktop"));
                                }
                                //-?

                                //- ? In case of updating to new domain there are only two possiblites as in the below code
                                else if(domain != selectedDomainCustomasin && current_browser1 == "desktop" && current_browser2 == "mobile" ){
                                        //- console.log("New Domain")
                                        document.getElementById("sourceData[customasin][browser]").append(new Option("Desktop","desktop",null,true));
                                        document.getElementById("sourceData[customasin][browser]").append(new Option("Mobile","mobile"));
                                }
                                else if(domain != selectedDomainCustomasin &&  current_browser1 == "mobile" && current_browser2 == "desktop"){
                                        document.getElementById("sourceData[customasin][browser]").append(new Option("Mobile","mobile"));
                                        document.getElementById("sourceData[customasin][browser]").append(new Option("Desktop","desktop",null,true));
                                }
                            }
                        }   
                    }
                }
        }
        //- showDomainCustomAsin function below is called only when the page loads on adding and editing.It brings value of current domain
        //- Customasin crawler which in turn sets the value of browser Interface.
        showDomainCustomAsin($("#sourceData\\[customasin\\]\\[domain\\]").val(),!{editing});  //-?This finds the current value of top most domain for selected Type of Crawler.
        $('#sourceData\\[customasin\\]\\[domain\\]').on('select2:select', function (e) {
            //- Calling the functions when the value from domain dropdown is changed.
            showDomainCustomAsin($("#sourceData\\[customasin\\]\\[domain\\]").val(),!{editing});  //-?This finds the current value of top most domain for selected Type of Crawler.
            currentBrowserCustomAsin($("#sourceData\\[customasin\\]\\[domain\\]").val(),"!{browser}",!{editing}); //-? From the value of Domain received the function sets the value of browser Interface
            });