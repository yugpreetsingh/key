div(id="amazonseller",class=" ",style="display:none")
    div(class="mb-3 row")
        label(for="sourceData[amazonseller][data]",class="col-sm-4 col-form-label") List of ASINs
            ul.form-text
                li One Per Line
                li ASINs are Case Sensitive
                li Example:
                    pre.
                        B07H9Y6YHX
                        B01ND1R7Y0
        .col-sm-5
            textarea(name="sourceData[amazonseller][data]",id="sourceData[amazonseller][data]",class="form-control",rows="10",onchange="countLines(this.id,'asinLinesAZ')",onkeyup="countLines(this.id,'asinLinesAZ')")=job.source.modifiedData
            div.mt-2
                input(type="button",value="Clean Up (Sort and Unique)",class="btn btn-sm btn-warning",onclick="cleanText('sourceData[amazonseller][data]')") 
                span.mt-2
                    strong
                        span  ASINs Found: 
                        span#asinLinesAZ 
                script.
                    countLines('sourceData[amazonseller][data]','asinLinesAZ')

    div(class="mb-3 row")
        label(for="sourceData[amazonseller][domain]",class="col-sm-4 col-form-label") Search Domain
        .col-sm-5
            - let domain_amazonseller = job.source.domain
            select(name="sourceData[amazonseller][domain]",id="sourceData[amazonseller][domain]",class="form-select",autocomplete="off",onclick=`showDomainAmazonSeller(this.value,${editing}),currentBrowserAmazonSeller("${domain}","${browser}",${editing})`)
                - let all_amazonseller = []
                each domain in domain_info
                    if domain.crawlerType == "amazonseller"
                        - all_amazonseller.push(domain.domainNickName)
                - all_amazonseller.sort()
                each domain_nick_name in all_amazonseller
                    each mydomain in domain_info 
                        if mydomain.crawlerType == "amazonseller" && mydomain.domainNickName === domain_nick_name
                            option(value = `${mydomain.domainName}`,selected = domain_categories == `${mydomain.domainName}`) #{mydomain.domainNickName}
                //- each domain in domain_info
                //-     if domain.crawlerType == "amazonseller"
                //-         option(value = `${domain.domainName}`,selected=domain_amazonseller == `${domain.domainName}`) #{domain.domainNickName}
                //- option(value="WWW.AMAZON.IN") Amazon.in (India)
    div(class="mb-3 row")
        label(for="sourceData[amazonseller][crawlinglanguage]",class="col-sm-4 col-form-label") Default Crawling Language
        .col-sm-5
            - let crawler_language_amazonseller = job.source.crawlinglanguage
            select(name="sourceData[amazonseller][crawlinglanguage]",id="sourceData[amazonseller][crawlinglanguage]",class="form-select",autocomplete="off")
                option(value="",selected = crawler_language_amazonseller == "") English (where applicable)
                option(value="native",selected = crawler_language_amazonseller == "native") Native Language
    div(class="mb-3 row")
            label(for="sourceData[amazonseller][batchsize]",class="col-sm-4 col-form-label") Batch Size
                .form-text
                    ul
                        li Ideally Batch Size for Amazon Seller Job is 1
                        li Only Positive Number can be provided as input
            .col-sm-5
                input(type = "number", min = "1", list="sourceData[amazonseller][batchsize]", name="sourceData[amazonseller][batchsize]", class = "form-control", value = `${batchsize}`,autocomplete = "off", placeholder = "Input Custom Batch Size or Select from the List")
                datalist(name="sourceData[amazonseller][batchsize]",id="sourceData[amazonseller][batchsize]")
                    option(value = 1) For Amazon Seller Type Job    
    div(class="mb-3 row")
        label(for="sourceData[amazonseller][browser]",class="col-sm-4 col-form-label") Browser Interface
        .col-sm-5
            select(name="sourceData[amazonseller][browser]",id="sourceData[amazonseller][browser]",class="form-select",autocomplete="off")
                //- option(value="desktop") Desktop
                //- option(disabled, value="mobile") Mobile

    div(class="mb-3 row")
        label(for="sourceData[amazonseller][screenshot]",class="col-sm-4 col-form-label") Save a Screenshot
            ul.form-text
                li Please keep in mind that each screenshot will take up additional disk space apart from the product page
        .col-sm-5
            select(name="sourceData[amazonseller][screenshot]",id="sourceData[amazonseller][screeshot]",class="form-select",autocomplete="off")
                option(value="false") No. Screenshot not required.
                option(disabled,value="true") Yes. Screenshot is required.

    div(class="mb-3 row")
        label(for="sourceData[amazonseller][proxytype]",class="col-sm-4 col-form-label") Proxy Type
        .col-sm-5
            - let proxyName = job.source.proxytype
            select(name="sourceData[amazonseller][proxytype]",id="sourceData[amazonseller][proxytype]",class="form-select",autocomplete="off")
                option(value="datacenter",selected = proxyName =="datacenter") Data Center
                option(value="hybrid",selected = proxyName =="hybrid") Data Center, Failover Residential
                option(value="residential",selected = proxyName =="residential") Residential (Higher Costing)
    
    div(class="mb-3 row")
        label(for="sourceData[amazonseller][sellerinfo]",class="col-sm-4 col-form-label") Get Seller Information
            ul.form-text
                li Generally for Seller Information, the Residential IPs will be  used
        .col-sm-5
            - let sellerInfo = job.source.sellerinfo
            select(name="sourceData[amazonseller][sellerinfo]",id="sourceData[amazonseller][sellerinfo]",class="form-select",autocomplete="off")
                option(value="false",selected= sellerInfo == false) No, Seller Information is not required
                option(value="true",selected= sellerInfo == true) Yes, get Seller Information
    script.
        let selectedDomainAmazonseller
        //- Search in Domain dropdown
        $(document).ready(function()  
        {
            $('#sourceData\\[amazonseller\\]\\[domain\\]').select2({width:'100%'});
            $('#sourceData\\[amazonseller\\]\\[domain\\]').one('select2:open', function(e) {
                $('input.select2-search__field').prop('placeholder', 'Search Domain Here');
            });
        });
        //- ! Below Comments are must read before any editing performed and in understanding the Code!
        //- ! Making "selectedDomainAmazonseller" a global variable to access it in the below functions.
        function showDomainAmazonSeller(currentDomain,isEditing){
            //-!  The value of selectedDomainAmazonseller is declared as global variable and is used in the below currentBrowserAmazonSeller function.Because not able to retrive the current value from same function(currentBrowserAmazonSeller()).
            selectedDomainAmazonseller = currentDomain
        } 
            //- ! The 'domain' argument in the below function is used to populate the domain while clicking on edit button which outputs to prefilled Job form.
        function currentBrowserAmazonSeller(domain,browser,editing){
                //-? Only domain passed in the above function is current value while browser and editing is fetched from the backend db collection where job is saved.
                //- * Storing all the domain information below after stringifying in variable allDomainInformation.
                let allDomainInformation = !{JSON.stringify(domain_info)}
                if(editing == false) {
                    //- * Emptying the browsers value on changing the domain which triggers the function again. Without
                    //- * emptying the browser interface getting stacked.
                    $('#sourceData\\[amazonseller\\]\\[browser\\]').html("")
                    //- * Currently selected domain is consoled below.Selected means selected from dropdown.
                    console.log("Current domain selected for crawler type Amazonseller is",selectedDomainAmazonseller)
                    for(let row of allDomainInformation){
                        //- ? While adding the job after selecting the domain populating the browserInterface.
                        if (row.crawlerType=="amazonseller" && row.domainName==selectedDomainAmazonseller)
                        {
                            if(row.browserInterface[0] == "desktop"){
                                document.getElementById("sourceData[amazonseller][browser]").append(new Option("Desktop","desktop"));
                            }
                            if(row.browserInterface[0] == "mobile"){
                                document.getElementById("sourceData[amazonseller][browser]").append(new Option("Mobile","mobile"));
                            }   
                            if(row.browserInterface[1] == "mobile"){
                                document.getElementById("sourceData[amazonseller][browser]").append(new Option("Mobile","mobile"));
                            }
                            if(row.browserInterface[1] == "desktop"){
                                document.getElementById("sourceData[amazonseller][browser]").append(new Option("Desktop","desktop"));
                            }
                        }
                    }
                }
                else if(editing == true){
                    console.log("Current selected domain for crawler Type Amazonseller is",domain,"and saved browser before editing is",browser,"with editing status",editing)
                    //- * Emptying the browsers value on change which triggers the function again. Without
                    //- * emptying the browser interface get stacked.
                    $('#sourceData\\[amazonseller\\]\\[browser\\]').html("")
                    for(let row of allDomainInformation){
                        if ((row.crawlerType=="amazonseller" && row.domainName==selectedDomainAmazonseller)){  
                            let browsers = row.browserInterface
                            //- Below console gives the value of browsers for the given domain in an array when selected during updating the edit job form. 
                            console.log("Browser Interface available for selected domain of amazonseller crawler type are "+ browsers)
                            if(browsers.length == 1){
                                let current_browser = browsers[0]
                                if (current_browser == "desktop")
                                    { 
                                        document.getElementById("sourceData[amazonseller][browser]").append(new Option("Desktop","desktop"));
                                    }
                                if (current_browser == "mobile")
                                    {
                                    document.getElementById("sourceData[amazonseller][browser]").append(new Option("Mobile","mobile"));   
                                    }
                            }
                            else if(browsers.length == 2){
                                //-    ?  If browser contains 2 interfaces (mobile and desktop) then populating browser Interface is slightly diffrent.
                                //-     ? The below code handles the situations if while adding the browser Interface on Keystone under New Crawler section whether the sequence is <desktop mobile> or <mobile desktop>.
                                let current_browser1
                                let current_browser2
                                if(browsers[0] == "mobile" && browsers[1] == "desktop"){
                                    current_browser1 = "mobile"
                                    current_browser2 = "desktop"
                                }
                                else if(browsers[0] == "desktop" && browsers[1] == "mobile"){
                                    current_browser1 = "desktop"
                                    current_browser2 = "mobile"
                                }
                                //- ? Always ensuring the value of given domain from frontend is equal to "mobile" and "desktop" only with ANY SEQUENCE.
                                if (domain == selectedDomainAmazonseller && browser ==  "desktop" && current_browser2=="mobile" && current_browser1 == "desktop"){
                                        document.getElementById("sourceData[amazonseller][browser]").append(new Option("Desktop","desktop",null,true));
                                        document.getElementById("sourceData[amazonseller][browser]").append(new Option("Mobile","mobile"));
                                }
                                else if (domain == selectedDomainAmazonseller &&   browser ==  "desktop" && current_browser2=="desktop" && current_browser1 == "mobile"){
                                        document.getElementById("sourceData[amazonseller][browser]").append(new Option("Desktop","desktop",null,true));
                                        document.getElementById("sourceData[amazonseller][browser]").append(new Option("Mobile","mobile"));
                                }
                                else if (domain == selectedDomainAmazonseller && browser == "mobile" && current_browser2 == "desktop" && current_browser1 == "mobile"){
                                        document.getElementById("sourceData[amazonseller][browser]").append(new Option("Mobile","mobile",null,true));
                                        document.getElementById("sourceData[amazonseller][browser]").append(new Option("Desktop","desktop"));
                                }
                                else if (domain == selectedDomainAmazonseller && browser == "mobile" && current_browser2 == "mobile" &&  current_browser1 == "desktop"){
                                        document.getElementById("sourceData[amazonseller][browser]").append(new Option("Mobile","mobile",null,true));
                                        document.getElementById("sourceData[amazonseller][browser]").append(new Option("Desktop","desktop"));
                                }
                                //-?

                                //- ? In case of updating to new domain there are only two possiblites as in the below code
                                else if(domain != selectedDomainAmazonseller && current_browser1 == "desktop" && current_browser2 == "mobile" ){
                                        //- console.log("New Domain")
                                        document.getElementById("sourceData[amazonseller][browser]").append(new Option("Desktop","desktop",null,true));
                                        document.getElementById("sourceData[amazonseller][browser]").append(new Option("Mobile","mobile"));
                                }
                                else if(domain != selectedDomainAmazonseller &&  current_browser1 == "mobile" && current_browser2 == "desktop"){
                                        document.getElementById("sourceData[amazonseller][browser]").append(new Option("Mobile","mobile"));
                                        document.getElementById("sourceData[amazonseller][browser]").append(new Option("Desktop","desktop",null,true));
                                }
                            }
                        }
                    }
                }
        }
        //- showDomainAmazonSeller function below is called only when the page loads on adding and editing.It brings value of current domain
        //- Amazonseller crawler which in turn sets the value of browser Interface.
        showDomainAmazonSeller($("#sourceData\\[amazonseller\\]\\[domain\\]").val(),!{editing});  //-?This finds the current value of top most domain for selected Type of Crawler.
        $('#sourceData\\[amazonseller\\]\\[domain\\]').on('select2:select', function (e) {
            //- Calling the functions when the value from domain dropdown is changed.
            showDomainAmazonSeller($("#sourceData\\[amazonseller\\]\\[domain\\]").val(),!{editing});  //-?This finds the current value of top most domain for selected Type of Crawler.
            currentBrowserAmazonSeller($("#sourceData\\[amazonseller\\]\\[domain\\]").val(),"!{browser}",!{editing}); //-? From the value of Domain received the function sets the value of browser Interface
            });